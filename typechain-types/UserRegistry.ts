/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace UserRegistry {
  export type UserStruct = {
    walletAddress: AddressLike;
    username: string;
    isVerified: boolean;
    createdAt: BigNumberish;
    lastActive: BigNumberish;
  };

  export type UserStructOutput = [
    walletAddress: string,
    username: string,
    isVerified: boolean,
    createdAt: bigint,
    lastActive: bigint
  ] & {
    walletAddress: string;
    username: string;
    isVerified: boolean;
    createdAt: bigint;
    lastActive: bigint;
  };
}

export interface UserRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getMessage"
      | "getTotalUsers"
      | "getUser"
      | "getUserByUsername"
      | "isUserRegistered"
      | "registerUser"
      | "storeMessage"
      | "updateUser"
      | "userAddresses"
      | "userMessages"
      | "usernameToAddress"
      | "users"
      | "verifyUser"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "MessageUpdated"
      | "UserRegistered"
      | "UserUpdated"
      | "UserVerified"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "getMessage",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalUsers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUser",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserByUsername",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isUserRegistered",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerUser",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "storeMessage",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "updateUser", values: [string]): string;
  encodeFunctionData(
    functionFragment: "userAddresses",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userMessages",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "usernameToAddress",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "users", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "verifyUser",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "getMessage", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTotalUsers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getUser", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getUserByUsername",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isUserRegistered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "storeMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updateUser", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userMessages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "usernameToAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "users", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "verifyUser", data: BytesLike): Result;
}

export namespace MessageUpdatedEvent {
  export type InputTuple = [user: AddressLike, message: string];
  export type OutputTuple = [user: string, message: string];
  export interface OutputObject {
    user: string;
    message: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UserRegisteredEvent {
  export type InputTuple = [userAddress: AddressLike, username: string];
  export type OutputTuple = [userAddress: string, username: string];
  export interface OutputObject {
    userAddress: string;
    username: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UserUpdatedEvent {
  export type InputTuple = [userAddress: AddressLike, username: string];
  export type OutputTuple = [userAddress: string, username: string];
  export interface OutputObject {
    userAddress: string;
    username: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UserVerifiedEvent {
  export type InputTuple = [userAddress: AddressLike];
  export type OutputTuple = [userAddress: string];
  export interface OutputObject {
    userAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface UserRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): UserRegistry;
  waitForDeployment(): Promise<this>;

  interface: UserRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getMessage: TypedContractMethod<
    [_userAddress: AddressLike],
    [string],
    "view"
  >;

  getTotalUsers: TypedContractMethod<[], [bigint], "view">;

  getUser: TypedContractMethod<
    [_userAddress: AddressLike],
    [UserRegistry.UserStructOutput],
    "view"
  >;

  getUserByUsername: TypedContractMethod<
    [_username: string],
    [UserRegistry.UserStructOutput],
    "view"
  >;

  isUserRegistered: TypedContractMethod<
    [_userAddress: AddressLike],
    [boolean],
    "view"
  >;

  registerUser: TypedContractMethod<[_username: string], [void], "nonpayable">;

  storeMessage: TypedContractMethod<[_message: string], [void], "nonpayable">;

  updateUser: TypedContractMethod<[_username: string], [void], "nonpayable">;

  userAddresses: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  userMessages: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  usernameToAddress: TypedContractMethod<[arg0: string], [string], "view">;

  users: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, boolean, bigint, bigint] & {
        walletAddress: string;
        username: string;
        isVerified: boolean;
        createdAt: bigint;
        lastActive: bigint;
      }
    ],
    "view"
  >;

  verifyUser: TypedContractMethod<
    [_userAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getMessage"
  ): TypedContractMethod<[_userAddress: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "getTotalUsers"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUser"
  ): TypedContractMethod<
    [_userAddress: AddressLike],
    [UserRegistry.UserStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserByUsername"
  ): TypedContractMethod<
    [_username: string],
    [UserRegistry.UserStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "isUserRegistered"
  ): TypedContractMethod<[_userAddress: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "registerUser"
  ): TypedContractMethod<[_username: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "storeMessage"
  ): TypedContractMethod<[_message: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateUser"
  ): TypedContractMethod<[_username: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "userAddresses"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "userMessages"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "usernameToAddress"
  ): TypedContractMethod<[arg0: string], [string], "view">;
  getFunction(
    nameOrSignature: "users"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, boolean, bigint, bigint] & {
        walletAddress: string;
        username: string;
        isVerified: boolean;
        createdAt: bigint;
        lastActive: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "verifyUser"
  ): TypedContractMethod<[_userAddress: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "MessageUpdated"
  ): TypedContractEvent<
    MessageUpdatedEvent.InputTuple,
    MessageUpdatedEvent.OutputTuple,
    MessageUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "UserRegistered"
  ): TypedContractEvent<
    UserRegisteredEvent.InputTuple,
    UserRegisteredEvent.OutputTuple,
    UserRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "UserUpdated"
  ): TypedContractEvent<
    UserUpdatedEvent.InputTuple,
    UserUpdatedEvent.OutputTuple,
    UserUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "UserVerified"
  ): TypedContractEvent<
    UserVerifiedEvent.InputTuple,
    UserVerifiedEvent.OutputTuple,
    UserVerifiedEvent.OutputObject
  >;

  filters: {
    "MessageUpdated(address,string)": TypedContractEvent<
      MessageUpdatedEvent.InputTuple,
      MessageUpdatedEvent.OutputTuple,
      MessageUpdatedEvent.OutputObject
    >;
    MessageUpdated: TypedContractEvent<
      MessageUpdatedEvent.InputTuple,
      MessageUpdatedEvent.OutputTuple,
      MessageUpdatedEvent.OutputObject
    >;

    "UserRegistered(address,string)": TypedContractEvent<
      UserRegisteredEvent.InputTuple,
      UserRegisteredEvent.OutputTuple,
      UserRegisteredEvent.OutputObject
    >;
    UserRegistered: TypedContractEvent<
      UserRegisteredEvent.InputTuple,
      UserRegisteredEvent.OutputTuple,
      UserRegisteredEvent.OutputObject
    >;

    "UserUpdated(address,string)": TypedContractEvent<
      UserUpdatedEvent.InputTuple,
      UserUpdatedEvent.OutputTuple,
      UserUpdatedEvent.OutputObject
    >;
    UserUpdated: TypedContractEvent<
      UserUpdatedEvent.InputTuple,
      UserUpdatedEvent.OutputTuple,
      UserUpdatedEvent.OutputObject
    >;

    "UserVerified(address)": TypedContractEvent<
      UserVerifiedEvent.InputTuple,
      UserVerifiedEvent.OutputTuple,
      UserVerifiedEvent.OutputObject
    >;
    UserVerified: TypedContractEvent<
      UserVerifiedEvent.InputTuple,
      UserVerifiedEvent.OutputTuple,
      UserVerifiedEvent.OutputObject
    >;
  };
}
